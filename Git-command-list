Here is a list of some commonly used Git commands:

1. `git init`: Initializes a new Git repository in the current directory.

2. `git clone <repository-url>`: Clones an existing Git repository from the specified URL to your local machine.

3. `git add <file>`: Adds a file to the staging area to be included in the next commit.

4. `git add .` or `git add --all`: Adds all changes (new, modified, and deleted files) in the current directory to the staging area.

5. `git commit -m "commit message"`: Creates a new commit with the changes from the staging area and adds a commit message.

6. `git status`: Shows the status of the working directory and staging area (e.g., which files have changes, which files are staged, etc.).

7. `git log`: Displays the commit history, showing the author, date, and commit message for each commit.

8. `git branch`: Lists all the branches in the repository, with an asterisk next to the currently checked-out branch.

9. `git branch <branch-name>`: Creates a new branch with the specified name.

10. `git checkout <branch-name>`: Switches to the specified branch.

11. `git merge <branch-name>`: Merges the changes from the specified branch into the current branch.

12. `git pull`: Fetches changes from the remote repository and merges them into the current branch.

13. `git push`: Pushes local commits to the remote repository.

14. `git remote add origin <repository-url>`: Adds a remote repository with the specified URL as the default remote.

15. `git remote -v`: Lists all the remote repositories associated with the current repository.

16. `git diff`: Shows the changes between the working directory and the staging area.

17. `git diff --cached`: Shows the changes between the staging area and the last commit.

18. `git diff HEAD`: Shows the changes between the working directory and the last commit.

19. `git reset <file>`: Removes a file from the staging area (unstages it).

20. `git reset --hard HEAD`: Discards all changes in the working directory and resets the repository to the last commit.

These are just some of the basic Git commands. Git is a powerful version control system with many other advanced features and commands. You can use `git --help` or `git <command> --help` to get more information about specific Git commands.
